<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LTAN.ME</title>
    <link>https://ltan.me/</link>
    <description>Recent content on LTAN.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 May 2021 12:46:19 +0800</lastBuildDate><atom:link href="https://ltan.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application Based on lua-resty-balancer</title>
      <link>https://ltan.me/post/2021/05/application-based-on-lua-resty-balancer/</link>
      <pubDate>Sun, 30 May 2021 12:46:19 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/application-based-on-lua-resty-balancer/</guid>
      <description>基于openresty lua-resty-balancer 模块实现自定义分流功能 该模块为提供分流算法，抽离了hash算法, roundrobin轮询</description>
      <content>&lt;h1 id=&#34;基于openresty-lua-resty-balancer-模块实现自定义分流功能&#34;&gt;基于openresty lua-resty-balancer 模块实现自定义分流功能&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;该模块为提供分流算法，抽离了hash算法, roundrobin轮询&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>How to Customize Load Balancing Logic Based on Openresty</title>
      <link>https://ltan.me/post/2021/05/how-to-customize-load-balancing-logic-based-on-openresty/</link>
      <pubDate>Wed, 19 May 2021 17:37:04 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/how-to-customize-load-balancing-logic-based-on-openresty/</guid>
      <description>基于openresty 自定义tcp 请求流量转发到不同消息处理服务器 有个消息推荐项目，netty 框架技术架构，客户端采用netty client 封装的私有tcp 协议 请求消息服务器。需要一套tcp 分流处理网关来分发请</description>
      <content>&lt;h1 id=&#34;基于openresty-自定义tcp-请求流量转发到不同消息处理服务器&#34;&gt;基于openresty 自定义tcp 请求流量转发到不同消息处理服务器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有个消息推荐项目，netty 框架技术架构，客户端采用netty client 封装的私有tcp 协议 请求消息服务器。需要一套tcp 分流处理网关来分发请求流量到不同的tcp 消息处理器，现采用openresty 基本可以满足，主要是是用到openresy  balancer&lt;/p&gt;
&lt;p&gt;[]: &lt;a href=&#34;https://github.com/openresty/lua-resty-balancer#name&#34;&gt;https://github.com/openresty/lua-resty-balancer#name&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模块技术实现，具体请参考官方文档说明&lt;/p&gt;
&lt;p&gt;主要思路是 利用 lua 语言 lpack 模块 对私有协议头 协议主体进行解析，解析得到设备id 取模得到一台上游消息处理服务器upstream server 节点， 然后通过balancer 模块更新上游处理服务器转发流量。&lt;/p&gt;
&lt;p&gt;也可以利用openresty 自带balancer 模块来完成实现，应用核心代码如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;stream {
  lua_code_cache off; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;关闭代码缓存，利于调用，生产环境不建议&lt;/span&gt;
  init_by_lua_block {  &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;当&lt;/span&gt;nginx &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;启动时，初始化时，从&lt;/span&gt;redis加载配置&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，或者从&lt;/span&gt;etcd &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;加载配置&lt;/span&gt;,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;该数据可以做一个后台管理，运维人员直接后台操作&lt;/span&gt;
    require(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ngx.balancer&amp;#39;&lt;/span&gt;)
    _G.BACKENDS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;172.17.0.1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;}, &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;消息&lt;/span&gt;netty服务器c2s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;172.17.0.2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;}, &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;消息&lt;/span&gt;netty服务器c2s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;172.17.0.3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;}, &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;消息&lt;/span&gt;netty服务器c2s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    }
  }
  
  &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;配置&lt;/span&gt;lua请求拦截器 upstream
  upstream lua_dispatcher {
    server &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;;
    balancer_by_lua_block {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; balancer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ngx.balancer&amp;#39;&lt;/span&gt;)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; backend_index
      &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ngx.crc32_long(ngx.ctx.devid);
      backend_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (hash &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; backend_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _G.BACKENDS[backend_index]
      &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;通过激活&lt;/span&gt;id算出一个hash值 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;取个模后，得到服务器下标&lt;/span&gt;index &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;然后更新&lt;/span&gt;balancer &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;即可流量负载过去&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; ok, err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balancer.set_current_peer(table.unpack(backend_table))
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; ok &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
          ngx.log(ngx.ERR, err)
          ngx.exit(ngx.ERROR)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    }
  }
  
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;配置代码&lt;/span&gt; proxy
  server {
    listen &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;;
    proxy_pass lua_dispatcher;
    preread_by_lua_block {
        require(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pack&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; mypack    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string.pack
        &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; myunpack    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string.unpack
        &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; sock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ngx.req.socket(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sock &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
            ngx.say(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;got the request socket&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            ngx.say(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to get the request socket: &amp;#34;&lt;/span&gt;, err)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;先尝试读取固定头&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;个字节&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; data, err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sock:receive(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果遇到&lt;/span&gt;timeout,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;或者&lt;/span&gt;close的情况&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，则&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;本次循环读取，继续下一条读取&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; err &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;close&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;按消息推送私有协议读取返回的参数，&lt;/span&gt;type1为消息类型&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;ver2为消息推送私有协议版本号&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;time待命时间&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;len4为消息体的长度&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，不包含头的长度&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; succ,succLen,type1,Ver2,Time3,Len4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pcall(myunpack,data,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;ccHH&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;读取剩余的消息体长度内容&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; body, err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sock:receive(Len4)
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;如果读取&lt;/span&gt;body为空&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，则退出&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; body &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;打印&lt;/span&gt;body消息内容 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;解析&lt;/span&gt;body是一个json串&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，需要对&lt;/span&gt;json进行解码&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，再赋值给&lt;/span&gt;ngx.ctx &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;全局上下文中共享变量&lt;/span&gt;
            ngx.ctx.device_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; body[devid]
            ngx.log(ngx.ERR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;------bdy &amp;#34;&lt;/span&gt;, body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  
    }
  }
  
    
  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下图，左边是设备，中间是tcp 流量转发器，  右 边是消息处理服务器，  设备需要和消息处理服务器 建立tcp长链接，并维持不间断时间心跳，总之采用openresty 来完现流量分发具有强性能，只需要在原来的netty消息层外层加个流量处理网关即可。&lt;/p&gt;
&lt;p&gt;但我们在实际环境不推荐这样做，除非小项目，大项目还是推荐apisix 网关来处理很方便&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20210519191548391.png&#34; alt=&#34;image-20210519191548391&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Posts</title>
      <link>https://ltan.me/tags/</link>
      <pubDate>Fri, 14 May 2021 10:48:01 +0800</pubDate>
      
      <guid>https://ltan.me/tags/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>How to Run Spring Boot Program on Windows Server</title>
      <link>https://ltan.me/post/2021/05/how-to-run-spring-boot-program-on-windows-server/</link>
      <pubDate>Thu, 13 May 2021 16:22:51 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/how-to-run-spring-boot-program-on-windows-server/</guid>
      <description>spring boot程序如何正确运行在Windows服务器上面 一次项目开发中，要求服务器是windows环境，一般我们都是用java sprint boot 开发的程序运行在linux 环境中，通过supervisor程序来守护，设置</description>
      <content>&lt;h1 id=&#34;spring-boot程序如何正确运行在windows服务器上面&#34;&gt;spring boot程序如何正确运行在Windows服务器上面&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一次项目开发中，要求服务器是windows环境，一般我们都是用java sprint boot 开发的程序运行在linux 环境中，通过supervisor程序来守护，设置开机启动之类的操作命令， 很少有人用windows server, 这次机会遇到这个问题需要解决，好在记的我在几年前用过java service wapper（简称jsw）这个程序 ，对jsw 有一些了解,于是找一相当资料看一下&lt;/p&gt;
&lt;p&gt;官网资料介绍在这里：https://wrapper.tanukisoftware.com/doc/english/launch-win.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我在这里简单介绍一下jsw，通过官网介绍，我了解到。&lt;/p&gt;
&lt;p&gt;他可以替代supervisor 做程序守护，开机启动等相关设置，如果是需要把jar包跑在windows 服务器当中。我需要通过sc 命令来注册服务指令&lt;/p&gt;
&lt;p&gt;目前我暂时用到服务守护，和服务注册，等特点，其他特性还没有研究。以下是记录一下我在spring boot 项目中如何使用它来打包成 jsw 服务。&lt;/p&gt;
&lt;p&gt;​    首先看一下我的项目结构图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210513163512015.png&#34; alt=&#34;image-20210513163512015&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要在pom.xml 加入maven 打外插件，
插件名为：maven-assembly-plugin&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;upgrade-admin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt; 
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;executable&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/executable&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--主要是以下插件配置--&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-assembly-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;descriptors&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--通过service-assembly.xml 描述该项目打包的配置信息--&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;descriptor&amp;gt;&lt;/span&gt;${project.basedir}/src/assembly/service-assembly.xml&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/descriptor&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/descriptors&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;service-assembly&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;single&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;配置服务jsw 打包描述信息&lt;/p&gt;
&lt;p&gt;以下是打包配置文件信息：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;service&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;bamboo-upgrade-service&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Bamboo Upgrade Service&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Bamboo Upgrade Windows service&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;executable&amp;gt;&lt;/span&gt;java&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/executable&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;-jar upgrade-admin.jar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;id: windows 服务id,要是唯一的，在windows 服务注册表里是唯一的

name: 服务名称

description：  服务描述

executable ： 执行bin 名称
arguments： 执行参数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210513163836081.png&#34; alt=&#34;image-20210513163836081&#34;&gt;&lt;/p&gt;
&lt;p&gt;​      service-assembly.xml 文件  这是打包核心配置核心文件&lt;/p&gt;
&lt;p&gt;​     主是用于告诉maven 需要打包的文件在哪 里，如何打包，打成什么格式的包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;assembly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://maven.apache.org/ASSEMBLY/2.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;service&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;formats&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;format&amp;gt;&lt;/span&gt;zip&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/format&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/formats&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fileSets&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Copy in the application JAR --&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fileSet&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;${project.build.directory}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;/&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;${project.build.finalName}.jar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fileSet&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Copy in the resources including the wrapper exe and config --&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;fileSet&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;${project.basedir}/src/assembly/resources&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;/&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fileSet&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/fileSets&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/assembly&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该文件的目录位置如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210513164413150.png&#34; alt=&#34;image-20210513164413150&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;执行打包 mvn package 命令
&lt;img src=&#34;./image-20210513164650797.png&#34; alt=&#34;image-20210513164650797&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署程序，降upgrade-admin-service.zip包 复制到一个正式的目录下解压后下图就是解压后zip后的效果
&lt;img src=&#34;./image-20210513164952742.png&#34; alt=&#34;image-20210513164952742&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先安装windows 服务指令，上图install.bat是我之前写好的，该文件就是用来install Windows 服务脚本
install.bat&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;@echo off
bamboo-upgrade-service-wrapper install
echo 安装bamboo服务完成
pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写启动服务，新建startup.bat文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;@echo off
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; /f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;skip=3 tokens=4&amp;#34;&lt;/span&gt; %&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sc query bamboo-upgrade-service&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; set &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zt=%%i&amp;#34;&lt;/span&gt; &amp;amp;goto &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;next
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;next
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; /i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%zt%&amp;#34;&lt;/span&gt;==&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt; (
echo 已经发现该服务在运行
) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (
   net start bamboo-upgrade-service
   echo 该服务现己启动&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;请等20秒中....
)
pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止服务 ，新建stop.bat文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  ```powershell
  @echo off
  for /f &amp;quot;skip=3 tokens=4&amp;quot; %%i in (&#39;sc query bamboo-upgrade-service&#39;) do set &amp;quot;zt=%%i&amp;quot; &amp;amp;goto :next
  :next
  if /i &amp;quot;%zt%&amp;quot;==&amp;quot;RUNNING&amp;quot; (
     net stop bamboo-upgrade-service
     echo 该服务现己关闭，请等20秒中....
  ) else (
  
  )
  pause
  ```
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;卸载服务, 新建uninstall.bat 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;@echo off
bamboo-upgrade-service-wrapper uninstall
echo 卸载bamboo服务完成
pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看windows运行效果&lt;/p&gt;
&lt;p&gt;按win+R 快捷键，输入&lt;em&gt;services.msc&lt;/em&gt;  命令，回车，&lt;/p&gt;
&lt;p&gt;设置开机启动该服务都可以在windows 这边设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210513165843939.png&#34; alt=&#34;image-20210513165843939&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>How to Do Not Release Resources After Uploading the Zip Package in Java</title>
      <link>https://ltan.me/post/2021/05/how-to-do-not-release-resources-after-uploading-the-zip-package-in-java/</link>
      <pubDate>Wed, 12 May 2021 19:36:48 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/how-to-do-not-release-resources-after-uploading-the-zip-package-in-java/</guid>
      <description>在windows系统中检验一个上传文件程序是否有bug另一种姿势 某一天在公司对一个文件上传项目进行bug修改，不料查到另一个bug 也顺带解决，在此记录一下解决过程 在windows系统调试一个文件上传程</description>
      <content>&lt;h1 id=&#34;在windows系统中检验一个上传文件程序是否有bug另一种姿势&#34;&gt;在windows系统中检验一个上传文件程序是否有bug另一种姿势&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;某一天在公司对一个文件上传项目进行bug修改，不料查到另一个bug 也顺带解决，在此记录一下解决过程&lt;/p&gt;
&lt;p&gt;在windows系统调试一个文件上传程序，手贱想重新删除原文件，重新上传，结果这一删除发现windows 弹窗，报窗&lt;/p&gt;
&lt;p&gt;&lt;em&gt;文件正常使用&lt;/em&gt;    错误提示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个程序需求就是把一个zip包上传到ftp当中，流程是先上传到服务器本地，然后同步到ftp当中&lt;/p&gt;
&lt;p&gt;在windows 调试过程重新删除了己上传的文件，但发现不能删除的，这个问题也找了很久。&lt;/p&gt;
&lt;p&gt;于是就重新梳理一下上传的流程。&lt;/p&gt;
&lt;p&gt;发现以下问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512194748766.png&#34; alt=&#34;image-20210512194748766&#34;&gt;&lt;/p&gt;
&lt;p&gt;来调试代码&lt;/p&gt;
&lt;p&gt;下面这段代码，上传zip后先保存到本地&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512194834905.png&#34; alt=&#34;image-20210512194834905&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来是解压zip&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512194951003.png&#34; alt=&#34;image-20210512194951003&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后增加zipFile.close() 解决，增加in.close() 解决&lt;/p&gt;
&lt;p&gt;问题总结：&lt;/p&gt;
&lt;p&gt;​    论代码review 重要性，前期需要多多测试。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>A Bug That Displays Abnormally After Uploading an Image</title>
      <link>https://ltan.me/post/2021/05/a-bug-that-displays-abnormally-after-uploading-an-image/</link>
      <pubDate>Wed, 12 May 2021 19:11:15 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/a-bug-that-displays-abnormally-after-uploading-an-image/</guid>
      <description>记一次解决图片上传后在浏览器不能正常显示的问题 原来这个项目是比较老，采用的是spirng mvc +ftp 技术搭建的上传功能，通过把一个静态资源h5页，打包成一个zip上传到后台 后台再对其zip包进行解压上传到cd</description>
      <content>&lt;h1 id=&#34;记一次解决图片上传后在浏览器不能正常显示的问题&#34;&gt;记一次解决图片上传后在浏览器不能正常显示的问题&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原来这个项目是比较老，采用的是spirng mvc +ftp 技术搭建的上传功能，通过把一个静态资源h5页，打包成一个zip上传到后台&lt;/p&gt;
&lt;p&gt;后台再对其zip包进行解压上传到cdn服务器，以域名访问该静态资源页面，其静态资源包含html,js, jpg。 然后设计师大部分以图片形式排版，组成的html5 幻灯显示页面，难后在上传过程有偶发性的遇到图片打不开，显示不正常等问题，bug是随机复现。于是找了很久才找到这个问题根源，下面对其记录一下&lt;/p&gt;
&lt;p&gt;问题主要原因：从本地上传到ftp服务器传输读写编码不一至导致的，对于二进制图片，应采用二进制上传，开启ftp被动模式,编码为ASCII，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于文本文件如css,txt,js文件应采用utf8或者ascii都可以，关键是在文件读写时需要保持编码前后一致即可&lt;/p&gt;
&lt;p&gt;意思就是在本地解压zip后，需要把zip包静态资源按照 目录格式同步 ftp 服务器当中，关键是文件在上传前后读写需要保持编码一至就不会出现这个问题&lt;/p&gt;
&lt;p&gt;下面开始详细分析调式&lt;/p&gt;
&lt;p&gt;当设置uft8编码上传图片文件后，每个文件上传后会少很多的字节内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512192524181.png&#34; alt=&#34;image-20210512192524181&#34;&gt;&lt;/p&gt;
&lt;p&gt;该图片文件默认在上传前编码格式为 ANSI&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512192650863.png&#34; alt=&#34;image-20210512192650863&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后从同步到ftp 服务器后，下载到本地打开发现，编码变成了GB2312 格式的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512192804222.png&#34; alt=&#34;image-20210512192804222&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然变成GB2312编码上传后的图片文件，文件md5值是一样的，浏览器不能正常显示图片文件，因为图片文件被编码破坏了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512192847433.png&#34; alt=&#34;image-20210512192847433&#34;&gt;&lt;/p&gt;
&lt;p&gt;原老项目采用apache commons net 包下的ftp client，不知道为什么设置了编码也没有解决问题，说是同步到ftp工具用apache camel 组件代替 apache commons net 的ftp  client,  替换之前尝试把编码设置成uft-8,果然很容易复现问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210512193353856.png&#34; alt=&#34;image-20210512193353856&#34;&gt;&lt;/p&gt;
&lt;p&gt;最终用apache camel 代替了 ftpclient 解决ftp 同步图片后偶发性打不开的问题&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Reverse Proxy to Websocket Service Set Based on Apisix2</title>
      <link>https://ltan.me/post/2021/05/reverse-proxy-to-websocket-service-set-based-on-apisix2.4-gateway/</link>
      <pubDate>Tue, 11 May 2021 15:39:09 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/reverse-proxy-to-websocket-service-set-based-on-apisix2.4-gateway/</guid>
      <description>基于apisix2.4网关反向代理到websocket服务集节点 问题背景，主要是解决远程控制通信服务端单点问题，借助openresty强劲的性能，可定制化的负载均衡设计特点 apisix就是基于open</description>
      <content>&lt;h1 id=&#34;基于apisix24网关反向代理到websocket服务集节点&#34;&gt;基于apisix2.4网关反向代理到websocket服务集节点&lt;/h1&gt;
&lt;p&gt;问题背景，主要是解决远程控制通信服务端单点问题，借助openresty强劲的性能，可定制化的负载均衡设计特点&lt;/p&gt;
&lt;p&gt;apisix就是基于openresty开发分布式网关集群平台，优势现阶段轻量，易维护等&lt;/p&gt;
&lt;p&gt;本为搭建环境，模拟集群环境，在我windows 电脑 采用docker 模拟&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;整体的环境说明：如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210511150518389.png&#34; alt=&#34;image-20210511150518389&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 搭建环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 运行python 容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -itd --name py3 -v /i:/i -v /d:/d django /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 进入容器，检查容器环境是否正常&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shel&#34; data-lang=&#34;shel&#34;&gt;docker exec -it  c5d2369adde2 /bin/bash
  
docker exec -it 58e1c95fea73 /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;./image-20210511150600898.png&#34; alt=&#34;image-20210511150600898&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 安装websocket&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt; pip install websocket 
  
 pip install stomp.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 启动后端 java websocket 环境&lt;/p&gt;
&lt;p&gt;进入java 容器，设置同一个网络环境，同一个网段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-she&#34; data-lang=&#34;she&#34;&gt;    docker run --name s1 --network app-tier -d -v /i:/i -v /d:/d -p 8081:8080 ltjsj/super-dev-env:v1.1 

​      docker exec -it s1 /bin/bash

​      java -jar /i/path/to/websocket.jar 

​       docker inspect s1 | findstr IPAddress # 查看容器ip， 准备填入apisix 节点 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 配置apisix&lt;/p&gt;
&lt;p&gt;路由代理，配置上游&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210511150841820.png&#34; alt=&#34;image-20210511150841820&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 编写python 脚本测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-pytho&#34; data-lang=&#34;pytho&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2021/03/31 下午03:21
# @Author  : ltan.me
   
from stomp_ws import Stomp
import time
   
def do_thing_a(msg):
    print(&amp;quot;MESSAGE: &amp;quot; + msg)
   
if __name__ == &amp;quot;__main__&amp;quot;:
   
    for i in range(0,10):
        #为了模拟设备id,激活id,采用id为作为通信参数，生成10个id分别请求websocket服务器域名
        url = &amp;quot;test.xxxx.com/stompServer/websocket?id=%s&amp;amp;activeId=416&amp;amp;deviceId=3657dc0cfede992b97d2135fd0514c6c&amp;amp;userId=1&amp;amp;&amp;amp;connectType=0&amp;amp;token=9d3b7282d295eefe9e9b959f63134dee&amp;quot; % str(i)
        print(url)
        stomp = Stomp(url, sockjs=True, wss=False)
        stomp.connect()
        stomp.subscribe(&amp;quot;/user/1_416/command&amp;quot;, do_thing_a)
        time.sleep(2)
        stomp.send(&amp;quot;/web2client_term&amp;quot;, &#39;{&amp;quot;userId&amp;quot;:1,&amp;quot;activeId&amp;quot;:416,&amp;quot;cmdType&amp;quot;:18,&amp;quot;content&amp;quot;:&amp;quot;python-hahah&amp;quot;}&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 最终运行效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210511151138269.png&#34; alt=&#34;image-20210511151138269&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210511151206802.png&#34; alt=&#34;image-20210511151206802&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Lua Language Parsing Private Protocol Package</title>
      <link>https://ltan.me/post/2021/05/lua-language-parsing-private-protocol-package/</link>
      <pubDate>Sat, 08 May 2021 17:47:39 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/lua-language-parsing-private-protocol-package/</guid>
      <description>使用lua语言解析tcp私有协议包示例 为什么需要lua来解析tcp 私有协议包？ 因为lua语言生态内，有强大的openresty 技术可使用，而openresty可以提供强劲的web 并发性能，能提供tcp</description>
      <content>&lt;h1 id=&#34;使用lua语言解析tcp私有协议包示例&#34;&gt;使用lua语言解析tcp私有协议包示例&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么需要lua来解析tcp 私有协议包？&lt;/p&gt;
&lt;p&gt;因为lua语言生态内，有强大的openresty 技术可使用，而openresty可以提供强劲的web 并发性能，能提供tcp 长链接通道 技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;首先需要lapck包对其解析&#34;&gt;首先需要lapck包对其解析&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git clone  https://github.com/Kong/lua-pack 
或
git clone https://github.com/lilien1010/lpack
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装lapck包需要编译&#34;&gt;安装lapck包需要编译&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210508175332849.png&#34; alt=&#34;image-20210508175332849&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;--编译时找不到luah头文件需要增加以下参数其目的是让编译是找到luajit-luah头文件--&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h1&gt;
&lt;p&gt;在编译时遇到 lua.h No such file or directory #include &amp;quot; lua.h&amp;quot; ？ 问题时，需要遇增加如下参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-DLUA_INCLUDE_DIR=/usr/local/openresty/luajit/include/luajit-2.1/ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终编译命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#DLUA_INCLUDE_DIR 表示lua.h 存放的位置 LUA_LIBRARY指定luajit库，so文件，
cmake ./  -DLUA_INCLUDE_DIR=/usr/local/openresty/luajit/include/luajit-2.1/  -DLUA_LIBRARY=/usr/local/lib/libluajit-5.1.so
make  #编译成so文件，得到pack.so
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;详细解析tcp私有代码如下&#34;&gt;详细解析tcp私有代码如下&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;require(&amp;quot;pack&amp;quot;)
local mypack    = string.pack
local myunpack    = string.unpack
local sock = ngx.req.socket(true)
if sock then
    ngx.say(&amp;quot;got the request socket&amp;quot;)
else
    ngx.say(&amp;quot;failed to get the request socket: &amp;quot;, err)
    return
end
while true do
    --先尝试读取固定头 6个字节
    local data, err = sock:receive(6)
    --如果遇到timeout,或者close的情况，则break 本次循环读取，继续下一条读取
    if err==&#39;timeout&#39; or err ==&#39;close&#39; then
        break
    end
    --按pmtp协议读取返回的参数，type1为消息类型，ver2为pmtp协议版本号，time待命时间，len4为消息体的长度，不包含头的长度
    --默认字节顺序为 大端，&amp;gt;ccHH
    local succ,succLen,type1,Ver2,Time3,Len4 = pcall(myunpack,data,&amp;quot;&amp;gt;ccHH&amp;quot;)
    --读取剩余的消息体长度内容
    local body, err = sock:receive(Len4)
    --如果读取body为空，则退出
    if body == nil then
        break
    end
    --打印body消息内容
    ngx.log(ngx.ERR, &amp;quot;------bdy &amp;quot;, body)
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过客户端链接后发送tcp私有协议包的一模拟效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210508175828796.png&#34; alt=&#34;image-20210508175828796&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ltan.me/about/</link>
      <pubDate>Sat, 08 May 2021 16:40:17 +0800</pubDate>
      
      <guid>https://ltan.me/about/</guid>
      <description>专注于 Java, Golang, lua 专注于 docker 分享 centos/ linux windows 相关技术 php, python, web前端 NAS 使用经验分享 10年软件开发相关工作经验，生活和工作在湾区的码农一枚，专注全栈应用APP开发，技术擅长PHP/JAVA/GOLANG/LUA和Uni</description>
      <content>&lt;p&gt;专注于 Java, Golang, lua&lt;/p&gt;
&lt;p&gt;专注于 docker&lt;/p&gt;
&lt;p&gt;分享 centos/ linux windows 相关技术&lt;/p&gt;
&lt;p&gt;php, python, web前端&lt;/p&gt;
&lt;p&gt;NAS 使用经验分享&lt;/p&gt;
&lt;p&gt;10年软件开发相关工作经验，生活和工作在湾区的码农一枚，专注全栈应用APP开发，技术擅长PHP/JAVA/GOLANG/LUA和Unix/Linux/Windows。做过大型门户网站，做过企业中台管理，做过企业DMP系统，规则引擎等大型项目。&lt;/p&gt;
&lt;h2 id=&#34;关于此博客&#34;&gt;关于此博客&lt;/h2&gt;
&lt;p&gt;博客主要用于记录生活，工作中遇到的问题，及解决方法和心得&lt;/p&gt;
&lt;p&gt;此博客基于 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 构建&lt;/p&gt;
&lt;p&gt;当前主题 &lt;a href=&#34;https://github.com/ttys3/hugo-theme-terminal/tree/ttys3&#34;&gt;terminal&lt;/a&gt; 修改自 &lt;a href=&#34;https://github.com/panr/hugo-theme-terminal&#34;&gt;panr/hugo-theme-terminal&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;链接收藏&#34;&gt;链接收藏&lt;/h1&gt;
&lt;p&gt;灰狐(&lt;a href=&#34;https://www.huihoo.com/&#34;&gt;https://www.huihoo.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zeef.com/&#34;&gt;https://zeef.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图书类&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://it-ebooks.info/&#34;&gt;http://it-ebooks.info/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.foxebook.net/&#34;&gt;http://www.foxebook.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://bestcbooks.com/&#34;&gt;http://bestcbooks.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://avxhm.se/&#34;&gt;https://avxhm.se/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;计算机电子书(&lt;a href=&#34;http://it-ebooks.flygon.net/&#34;&gt;http://it-ebooks.flygon.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;免费的计算机编程类中文书籍(&lt;a href=&#34;https://github.com/justjavac/free-programming-books-zh_CN&#34;&gt;https://github.com/justjavac/free-programming-books-zh_CN&lt;/a&gt;)。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Solve the Problem of Maven Packaging Static Resource Coding</title>
      <link>https://ltan.me/post/2021/05/solve-the-problem-of-maven-packaging-static-resource-coding/</link>
      <pubDate>Sat, 08 May 2021 16:39:39 +0800</pubDate>
      
      <guid>https://ltan.me/post/2021/05/solve-the-problem-of-maven-packaging-static-resource-coding/</guid>
      <description>解决maven生成jar包时字体不能正常显示 由于前端人手不够，今天做了一个小项目，这个项目是用spring boot + layui 构建的后台管理系统。就没有用到前后端分离的方式去开发 项目做完后在打包时运行时发现浏览器显</description>
      <content>&lt;h1 id=&#34;解决maven生成jar包时字体不能正常显示&#34;&gt;解决maven生成jar包时字体不能正常显示&lt;/h1&gt;
&lt;p&gt;由于前端人手不够，今天做了一个小项目，这个项目是用spring boot  + layui 构建的后台管理系统。就没有用到前后端分离的方式去开发&lt;/p&gt;
&lt;p&gt;项目做完后在打包时运行时发现浏览器显示字体损坏，导致网站icon图标不能正常显示&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法：&lt;/h2&gt;
&lt;p&gt;在pom.xml 里找到build 区块用下面代码替换它&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;build&amp;gt;
        &amp;lt;finalName&amp;gt;ivy-admin&amp;lt;/finalName&amp;gt;
        &amp;lt;resources&amp;gt;
            &amp;lt;resource&amp;gt;
                &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
                &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
                &amp;lt;excludes&amp;gt;
                    &amp;lt;exclude&amp;gt;static/layui/font/**&amp;lt;/exclude&amp;gt;
                    &amp;lt;exclude&amp;gt;static/admin/font/**&amp;lt;/exclude&amp;gt;
                    &amp;lt;exclude&amp;gt;static/admin/fonts/**&amp;lt;/exclude&amp;gt;
                &amp;lt;/excludes&amp;gt;
            &amp;lt;/resource&amp;gt;
            &amp;lt;resource&amp;gt;
                &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
                &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;
                &amp;lt;includes&amp;gt;
                    &amp;lt;include&amp;gt;static/layui/font/**&amp;lt;/include&amp;gt;
                    &amp;lt;include&amp;gt;static/admin/font/**&amp;lt;/include&amp;gt;
                    &amp;lt;include&amp;gt;static/admin/fonts/**&amp;lt;/include&amp;gt;
                &amp;lt;/includes&amp;gt;
            &amp;lt;/resource&amp;gt;
        &amp;lt;/resources&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;executable&amp;gt;true&amp;lt;/executable&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;问题原因&#34;&gt;问题原因:&lt;/h2&gt;
&lt;p&gt;经过发现在不加上面打包代码时，不排除font 字体目录时，发现maven在打包复制时，对其font字体文件编译，导致文件被改写，编码和原来的字体文件不一样，导致打包前，打包前文件md5不一样，font 字体损坏，最终浏览器显示字体损坏&lt;/p&gt;
&lt;p&gt;打包后可以对比一下字体md5文件，就知道mvn在编译打包时，损坏了font&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./image-20210508170557174.png&#34; alt=&#34;image-20210508170557174&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
