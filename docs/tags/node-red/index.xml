<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node-Red on LTAN.ME</title>
    <link>http://localhost:54137/tags/node-red/</link>
    <description>Recent content in Node-Red on LTAN.ME</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Jan 2024 17:22:05 +0800</lastBuildDate><atom:link href="http://localhost:54137/tags/node-red/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Remember the Problem of Apisix and Node Red Multi Instance Debugging</title>
      <link>http://localhost:54137/post/2024/01/remember-the-problem-of-apisix-and-node-red-multi-instance-debugging/</link>
      <pubDate>Tue, 16 Jan 2024 17:22:05 +0800</pubDate>
      
      <guid>http://localhost:54137/post/2024/01/remember-the-problem-of-apisix-and-node-red-multi-instance-debugging/</guid>
      <description>&lt;h1 id=&#34;resolving-docker-compose-and-apisix-port-502-error&#34;&gt;Resolving Docker Compose and ApiSix Port 502 Error&lt;/h1&gt;
&lt;p&gt;在工作中，我尝试部署Saas应用程序，使用了Docker Compose、ApiSix和Node-RED。
然而，在这个过程中，我遇到了一个502端口访问错误。
我花了一整天的时间来解决这个问题，最终找到了问题的原因。&lt;/p&gt;
&lt;p&gt;问题出在我创建Node-RED实例并在ApiSix中添加upstream时。
我注意到，当我运行以下命令来创建Node-RED实例时，我不小心将端口号设置为1881来进行暴露：&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;resolving-docker-compose-and-apisix-port-502-error&#34;&gt;Resolving Docker Compose and ApiSix Port 502 Error&lt;/h1&gt;
&lt;p&gt;在工作中，我尝试部署Saas应用程序，使用了Docker Compose、ApiSix和Node-RED。
然而，在这个过程中，我遇到了一个502端口访问错误。
我花了一整天的时间来解决这个问题，最终找到了问题的原因。&lt;/p&gt;
&lt;p&gt;问题出在我创建Node-RED实例并在ApiSix中添加upstream时。
我注意到，当我运行以下命令来创建Node-RED实例时，我不小心将端口号设置为1881来进行暴露：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --network apisix_apisix --name node-red-a -p 1880:1880 nodered/node-red:3.1.0-18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --network apisix_apisix --name node-red-b -p 1881:1880 nodered/node-red:3.1.0-18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --network apisix_apisix --name node-red-c -p 1882:1880 nodered/node-red:3.1.0-18
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但实际上，Docker网络apisix_apisix并没有使用这个暴露端口，&lt;br&gt;
而是使用了内部网络的端口。这个错误导致了我一整天的时间浪费。&lt;/p&gt;
&lt;p&gt;为了解决问题，我将Node-RED实例的端口号设置为1880，  &lt;br&gt;
与Docker网络中的端口一致，这样ApiSix能够正确地与Node-RED实例通信。&lt;br&gt;
以下端口必须要填写内部的程序实际端口&lt;br&gt;
&lt;img src=&#34;http://localhost:54137/post/2024/01/remember-the-problem-of-apisix-and-node-red-multi-instance-debugging/screenshot-20240116-205136.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
